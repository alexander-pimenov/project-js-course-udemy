//директива говорящая скриптовому файлу, что мы работаем в современном режиме
"use strict";
const a = 'l';
console.log(a);

//1-й сп-б объявления переменной - изменяемая переменная
let number = 5;

//2-й сп-б объявления переменной - константа, не изменяемая, один раз задается
const leftBorderWidth = 2;
//хороший тон - использовать const везде, где возможно, НО конечно прямых
//констант в js не бывате, пример с объетом ниже это доказывает. 
//Там всё изменяется.

number = 10;
console.log(number);

const obj = {
    a: 50
};

obj.a = 10;
console.log(obj);

//дублирование строки - Shift+Alt+стрелка вверх или вниз

//3-й устаревший вариант задания переменной - НЕ использовать!!!
//т.к. это не логичная конструкция - она видна в коде еще до того, как объявлена
//т.е. она может быть вызвана из любой части кода, и над ней (до объявления) и 
//под ней (после объявления)
//Нет предупреждения об оштбке, если вызываем её до объявления, а получим
//значение - undefined
//Это называется ВСПЛЫТИЕ ПЕРЕМЕННЫХ - ХОЙСТИНГ
var _name = 'Ivan';
_name = 'Alex';

//если объявим переменную в блоке кода { }, то она не будет видна за пределами этого
//кода

{
    let result = 50;
}
console.log(result); //result is not defined

//давай нормальные имена переменным, не беспокойтесь о памяти, назначайте сколько нужно переменных
//чтоб не запутаться не переиспользуйте их без надобности
const vehicleBodyWidt = 4000;
const vehicleBodyLength = 5000;
console.log("Ширина кузова авто: " + vehicleBodyWidt + ", длина: " + vehicleBodyLength);


['zxc', 'asd', 'qwe'].map(a => console.log(a + ' !!'));


/* 2 - СТИЛИ НАИМЕНОВАНИЯ ПЕРЕМЕННЫХ*/
//snake_case - вариант названия папок и файлов
//Kebeb-case - тоже вариант названия папок и файлов
//UPPER_SNAKE_CASE - так как и в Java называют константы, которые нельзя переопределять !!!
//PascalCase - используют для названия классов 

//например цвета не изменяем
const COLOR_RED = '#F00';

// с нижним подчеркиванием - ТОЖЕ НЕ ИЗМЕНЯТЬ!!!
const _apiBase = 'https://gateway.marvel.com:443/v1/piblic';
//ЗДЕСЬ БУДЕТ ВАШ КЛЮЧ, ЭТОТ КЛЮЧ МОЖЕТ НЕ РАБОТАТЬ
const _apiKey = 'apikey=d4eecb0c66dedbfae4eab45d312fc1df';


/* 3 - ТИПЫ ДАННЫХ*/
//Number имеет занчение НЕ больше 9007199254740991 или -9007199254740991
const max = Number.MAX_SAFE_INTEGER; // 9007199254740991 = 2^53-1 (Его значение равно двум в пятдесят третьей степени, минус один (2**53–1))
console.log(max);
const min = Number.MIN_SAFE_INTEGER; // -9007199254740991
console.log(min);

//чтобы работать с больштми чем Nuber нужно добавить букву n после числа и 
//она будет соответствовать BigInt
BigInt(123) === 123n;
const newBigIntNumber = BigInt(Number.MAX_SAFE_INTEGER) + 2n;
console.log(newBigIntNumber);

//Если необходимо привести BigInt к логическому типу 
//(что происходит при использовании if, &&, ||, Boolean(int) ), 
//то новый тип ведет себя подобно типу Number:
if (0n) {
    console.log('true');
} else {
    console.log('false');
}

//числа с запятой
let doubleNumber = 4.6;

console.log(4 / 0); //Infinity !!! - бесконечность
console.log(-4 / 0); //-Infinity !!! - бесконечность
console.log('str' * 9); // NaN !!! - не число

//строковое значение
const person1 = "Alex"; //двойная кавычка
const person2 = 'Alex'; //одинарная кавычка
const person3 = `Alex`; //косая кавычка

//булиновое значение
const bool = false;

//
let und;
console.log(und); //undefined

console.log(undefffined); //ошибка - undefffined is not defined

//ОБЪЕКТ - комплексная структура, содержит в себе свойства (property) данных 
//различных типов и методы
//В объекте порядок не имеет важности
const objN = {
    name: 'John',
    age: 15,
    isMarried: false
};

//доберемся до свойств объекта
console.log("имя: " + objN.name);
console.log("возраст: " + objN['age']); //но лучше к свойствам обращаться через точку

//Массив - структура данных (разновидность объекта, где ключи-свойства уже заданы и это
//поряковые номера под которыми лежат данные), в которой данные идут строго по порядку, ищем по индексу
//Маасивы это как и любой объект - комплексный тип данных, т.е. может содеожать в 
//себе что угодно, но только в определенном порядке
//В Java массивы строго типизированны!!! 
//              0:             1:             2:
let arr1 = ['plum.png', 'orange.jpg', 'apple.bmp']; //с одним типом данных
let arr2 = ['plum.png', 'orange.jpg', 6, 'apple.bmp', []]; //с разными типами данных

console.log(arr1[1]);
console.log(arr2[2]);

//Еще немного о Массивах и Объектах
const arrr1 = ['a', 'b', 'c'];
//есть массив из 3-х элементов и вдруг мы хотим добавить 11-й элемент!!!!
arrr1[10] = 1256;
//и опять магия - он добавится!!!
console.log(arrr1[10]); //1256
console.log(arrr1); //[ 'a', 'b', 'c', <7 empty items>, 1256 ]
//такой способ изменения данных в массиве не рекомендуется, т.к. получаются пустоты!



const arrr1LikeObj = {
    0: 'a',
    '1': 'b',
    c2: 'c'
};
console.log(arrr1[1]);
console.log(arrr1LikeObj[1]);

//У массива есть методы перебора данных, добавления данных в него и т.д.
console.log(arrr1[1]);

//[] скобки более безопастны для обращения к свойствам объекта
console.log(arrr1LikeObj[0]); //здесь нужно поставить []
console.log(arrr1LikeObj[1]); //здесь нужно поставить [], т.к. js немного
//путается когда в свойствах стоят чила а не строки, хотя они тоже строки
//также [] нужно если идет кирилица или араьские буквы
console.log(arrr1LikeObj.c2); //а здесь можно вызвать через точку 
console.log(arrr1LikeObj['c2']); //а так через []


const objj1 = { a: 1, b: 2, c: 3 };
console.log(objj1.a);

//свойства можно брать в кавычки , а можно и не брать, т.к. свойства это строки
const objj2 = {
    Anna: 100,
    'Alice': 200,
    'Kent': 300
};

console.log(objj2.Alice);

//создаем новое свойство внутри объекта !!!
objj2.s = '123'; //s - новое свойство, если его нет в объекте то js его создаст!!!
console.log(objj2['s']); //123
console.log(objj2.s); //123
console.log(objj2); //{ Anna: 100, Alice: 200, Kent: 300, s: '123' }

objj2['q'] = 'ASD'; //q - новое свойство, добавленое через []
console.log(objj2); //{ Anna: 100, Alice: 200, Kent: 300, s: '123', q: 'ASD' }

//И еще немного магии от JS: еще способ создать новое свойство в объекте
const m = 'r';
objj2[m] = 'OPA';
console.log(objj2); //{ Anna: 100, Alice: 200, Kent: 300, s: '123', q: 'ASD', r: 'OPA' }

//Вложенные структуры для объектов
const objjj3 = {
    Anna: 100,
    'Alice': 200,
    'Kent': 300,
    abc: {
        sadd: 555,
        fff: {
            qwerty: 999
        },
        arr: ['комедия', 'драма', 'мультик', {
            superr: 'Супер вложенный'
        }]
    }
};
console.log(objjj3.abc.sadd); //555
console.log(objjj3['abc']['sadd']); //555
console.log(objjj3['abc']['arr'][1]); //драма
console.log(objjj3.abc.arr[1]); //драма
console.log(objjj3.abc.arr[3].superr); //Супер вложенный

const storeName = 'Castorama';
const storeDescription = {
    budget: 10000,
    employees: ['Alex', 'Rocky', 'Fred'],
    products: {
        apple: 50,
        orange: 65
    },
    open: true
};

/* 3 - JS это про работу с людьми*/
/**Еще вариант alert() - внутри лежит то что хотим поместить на сраничку*/

alert('Hello');







